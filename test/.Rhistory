gamma*(beta[1,1]*nH + beta[2,2]*nL) + gamma^2
eigenvals <- c(
Tr/2 + 0.5*(sqrt(Tr^2 - 4*Det)),
Tr/2 - 0.5*(sqrt(Tr^2 - 4*Det))
)
print(paste("eigenvalue:",eigenvals))
Tr <- beta[1,1]*nH + beta[2,2]*nL - 2*gamma
Det <- nH*nL*(beta[1,1]*beta[2,2]-beta[1,2]*beta[2,1]) -
gamma*(beta[1,1]*nH + beta[2,2]*nL) + gamma^2
eigenvals <- c(
Tr/2 + 0.5*(sqrt(Tr^2 - 4*Det)),
Tr/2 - 0.5*(sqrt(Tr^2 - 4*Det))
)
print(paste("eigenvalue:",eigenvals))
Det
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-"))
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("_","o"))
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","o"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","o"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","o"))
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",type="o");
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",type="o");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-","o"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",t="o");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-","o"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue","o");
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-","o"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty="o");
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty="o");
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty=3);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty=6);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="RED");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="blue",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-",3))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","red","blue"),
pch = c("-","-","-","-"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue");
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","blue","red"),
pch = c("-","-","-","-"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue",lwd=3);
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=2);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","blue","red"),
pch = c("-","-","-","-"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue",lwd=3);
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=3);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","blue","red"),
pch = c("-","-","-","-"))
knitr::opts_chunk$set(
eval      = TRUE,
message = TRUE,
fig.align = "center")
require(deSolve);
#The function that describes the ODE's
STD<-function(t,y,p){;
IH = y[1];
IL = y[2];
with(as.list(p), {
dIH.dt = beta[1,1]*(nH - IH)*IH + beta[1,2]*(nH-IH)*IL - gamma*IH;
dIL.dt = beta[2,1]*(nL - IL)*IH + beta[2,2]*(nL-IL)*IL - gamma*IL;
return(list(c(dIH.dt,dIL.dt)));
})
}
#################################################################################
#Parameter values for syphilis
IH0 = 1e-5
IL0 = 0
beta = matrix(data=c(10,0.1,0.1,1.0),ncol=2,nrow=2);
nH = 0.2; nL = 0.8;
gamma = 1;
p = list(beta=beta,gamma=gamma,nH=nH,nL=nL);
y0 = c(IH=IH0,IL=IL0);
###########################################################################
############################################################################
#Running the ode integrator
Steps  = 100; #it's useful to define the number of steps separately
t = seq(from=0,to=60,by=1/Steps); #now we define the time interval and the step size
out = ode(y=y0,times=t,func=STD,parms=p); #doing the integration
## Code up Jacobian for disease-free equilibrium
getJac <- function(p){
Jac = matrix(data=c(beta[1,1]*nH-gamma,
beta[2,1]*nL,
beta[1,2]*nH,
beta[2,2]*nL - gamma),
nrow=2,ncol=2)
return(Jac)
}
Jac <- getJac(p)
num_eigvals <- eigen(Jac)
print(paste("numeric eigvals:",num_eigvals$values))
Tr <- beta[1,1]*nH + beta[2,2]*nL - 2*gamma
Det <- nH*nL*(beta[1,1]*beta[2,2]-beta[1,2]*beta[2,1]) -
gamma*(beta[1,1]*nH + beta[2,2]*nL) + gamma^2
eigenvals <- c(
Tr/2 + 0.5*(sqrt(Tr^2 - 4*Det)),
Tr/2 - 0.5*(sqrt(Tr^2 - 4*Det))
)
print(paste("analytic eigenvalue:",eigenvals))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue",lwd=3);
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=3);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numerical eigenval"),
col= c("black","gray","blue","red"),
pch = c("-","-","-","-"))
## Copying
#The next line is a time series of infected hosts
plot(out[,1],log10(out[,2]),type="l",lwd=2,xlab="Time (years)",ylab="Fraction Infected",
xlim = c(0,30),
ylim = c(-5,-1));
lines(out[,1],log10(out[,3]),col="gray")
abline(a=-5,b=log10(exp(eigenvals[1])),col="blue",lwd=3);
abline(a=-5,b=log10(exp(num_eigvals$values[1])),col="red",lty=2,lwd=3);
legend("topright",
legend = c("High risk","Low risk", "Analytic eigenval", "Numeric eigenval"),
col= c("black","gray","blue","red"),
pch = c("-","-","-","-"))
eigenvals
# ## load package
# rm(list=ls())
#
# source("loadRData.R")
# source('initialize_solution.R')
# source('answer.R')
# source('check.R')
#
# # loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
#
# # TODO: make like >>
# #library(CheckMe)
library("CheckMe")
initialize_solution(solutions_path = "../inst/extdata/lab1_sol.RData")
stroke.vol <- 75
heart.rate <- 60
time.pm <- 80
volume <- stroke.vol*heart.rate*time.pm
print(volume)
###
# BUG: answer() funcs can't be added or removed
# will break check()
answer(volume)
###
initial.infect <- 20
spread.rate <- 0.08
time.day <- 30
total.infect <- initial.infect*(1+spread.rate)^time.day
print(total.infect)
answer(total.infect)
carrying.capacity <- 30000
intrinsic.gr <- 0.08
a.c <- 29
time.yr <- 25
log.model.pop <- carrying.capacity/(1+(a.c*exp(-intrinsic.gr*time.yr)))
print(log.model.pop)
answer(log.model.pop)
stroke.vol <- 75
heart.rate <- 60
time.pm <- 0:1440
volume <- stroke.vol*heart.rate*time.pm
print(volume[73])
answer(volume[73])
answer(plot(volume, time.pm, xlab = "total volume", ylab = "time per minute", t="l", col=1))
heart.rate <- 120
volume <- stroke.vol*heart.rate*time.pm
#print(volume)
answer(lines(volume, time.pm, col=2))
initial.infect <- 20
spread.rate <- 0.08
time.day <- 0:60
total.infect <- initial.infect*(1+spread.rate)^time.day
print(total.infect[10]) #got the wrong answer with 11 (43.1785), but the right one with 10
answer(total.infect[10]) # CHANGED TO 11 FOR WRONG ANSWER TEST
total.infect[11]
answer(plot(total.infect, time.day, xlab = "total infected population", ylab = "time (days)", t="l", col=1))
spread.rate <- 0.10
total.infect <- initial.infect*(1+spread.rate)^time.day
print(total.infect)
answer(lines(total.infect, time.day, col=2))
carrying.capacity <- 30000
intrinsic.gr <- 0.08
a.c <- 29
time.yr <- 0:100
log.model.pop <- carrying.capacity/(1+(a.c*exp(-intrinsic.gr*time.yr)))
print(log.model.pop[16])
answer(log.model.pop[16])
answer(plot(time.yr, log.model.pop, xlab = "time (years)", ylab = "population size", t="l", col=1))
a.c <- 2
log.model.pop <- carrying.capacity/(1+(a.c*exp(-intrinsic.gr*time.yr)))
print(log.model.pop)
answer(lines(time.yr, log.model.pop, col=2))
## CHECK CODE
check()
devtools::use_data(lab1_sol,CheckMe)
check_table
View(check_table)
class(check_table)
data.table::fwrite(check_table,"student_answers.csv")
?fwrite
getwd()
setwd("../../../")
setwd("TA_work_2020_spring/CheckMe/test/")
read.csv("student_answers.csv")
x<- read.csv("student_answers.csv")
View(x)
class(x)
fread("student_answers.csv")
?fread
data.table::fread(file="student_answers.csv")
x<-fread(file="student_answers.csv")
x<-data.table::fread(file="student_answers.csv")
view(x)
View(x)
class(x)
x$answer
x$answer[3]
x$answer[5]
ls1<- x$answer[5]
solut
solutions_table$answer[5]
View(solutions_table)
ls2 <- solutions_table$answer[6]
ls1 %in% ls2
ls2
ls1
save(check_table,"student_answers")
save("student_answers",check_table)
?save
save(check_table,file = "student_answers.RData")
install.packages(shiny)
install.packages("shiny")
source('~/.active-rstudio-document', echo=TRUE)
?loadRData
load(url(https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true))
load(url("https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true"))
get(ls()[ls()!= "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true"])
x<-get(ls()[ls()!= "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true"])
# ## load package
# rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
# ## load package
# rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
#library("CheckMe")
initialize_solution(solutions_path = "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true")
View(loadRData)
#library("CheckMe")
initialize_solution(solutions_path = "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true", url=TRUE)
# ## load package
rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
#library("CheckMe")
initialize_solution(solutions_path = "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true", url=TRUE)
# ## load package
rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
#library("CheckMe")
initialize_solution(solutions_path = "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true", url=TRUE)
# ## load package
rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
# ## load package
rm(list=ls())
#
source("loadRData.R")
source('initialize_solution.R')
source('answer.R')
source('check.R')
# loads table with solutions and initializes table for student answer
# initialize_solution(solutions_path = "lab1_sol.RData")
# TODO: make like >>
#library(CheckMe)
#library("CheckMe")
#initialize_solution(solutions_path = "https://github.com/chrisporras/CheckMe/blob/master/inst/extdata/lab1_sol.RData?raw=true", url=TRUE)
initialize_solution(solutions_path = "../inst/extdata/lab1_sol.RData")
usethat::use_vignette("introduction")
devtools::build_vignettes()
devtools::build_vignettes("introduction")
devtools::build_vignettes("../inst/vignettes/introduction.Rmd")
devtools::build_vignettes("../inst/vignettes/")
devtools::build_vignettes("../inst/vignettes")
?build_vignettes
devtools::build_vignettes("../CheckMe.Rproj")
